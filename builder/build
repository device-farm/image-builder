#!/bin/bash
set -e

DOCKER_IMAGE=$1
shift
LAYERS="base linux root installer $@"

if [ -z "$DOCKER_IMAGE" -o -z "$LAYERS" ]
then
    echo "Use: build <docker_image_name> <layers>..."
fi

echo "Building installer image $DOCKER_IMAGE on layers [$LAYERS]"

addVar() {
    KEY=$1
    VALUE=$2
    echo "$KEY=\"$VALUE\""
    eval "$KEY=\"$VALUE\""
    DOCKER_BUILD_ARGS="$DOCKER_BUILD_ARGS --build-arg \"$KEY=$VALUE\""
    echo "$KEY=\"$VALUE\"" >>$DOCKER_CTX/root/etc/build
}

applyLayer() {

    local LAYER=$1

    if [ -f $DOCKER_CTX/applied-layers/$LAYER ]
    then
        return
    fi

    local LAYER_DIR=$(dirname $0)/layers/$LAYER

    if [ ! -d $LAYER_DIR ]
    then
        echo "Layer directory $LAYER_DIR does not exist"
        exit 1
    fi

    if [ -f $LAYER_DIR/layer-deps ]
    then
        for LAYER_DEP in $(cat $LAYER_DIR/layer-deps)
        do
            applyLayer $LAYER_DEP
        done
    fi

    echo "Applying layer $LAYER"

    cp -r $LAYER_DIR/. $DOCKER_CTX
    mkdir -p $DOCKER_CTX/applied-layers
    echo $LAYER_DIR >$DOCKER_CTX/applied-layers/$LAYER

    for APPEND in $(find $DOCKER_CTX -type f -regex '.*\.append$')
    do
        TARGET=$(echo $APPEND | sed 's/\.append$//')
        cat $APPEND >>$TARGET
        rm $APPEND
    done
}

DOCKER_CTX=/tmp/build-ctx
rm -rf $DOCKER_CTX
mkdir -p $DOCKER_CTX/root/etc

for LAYER in $LAYERS
do
    applyLayer $LAYER
done

rm $DOCKER_CTX/layer-deps

date --iso-8601=seconds >>$DOCKER_CTX/_BUILD_DATE

addVar BOARD_ID $DOCKER_IMAGE
for FILE in $DOCKER_CTX/_*
do    
    KEY=$(echo $(basename $FILE) | sed s/^.//)
    VALUE=$(cat $DOCKER_CTX/_$KEY)
    addVar "$KEY" "$VALUE"
done

for FRAGMENT in top cc uboot kernel root installer
do
        cat >>$DOCKER_CTX/Dockerfile <<EOF

##############################################
# $FRAGMENT
##############################################

EOF
    for FRAGMENT_FILE in $(ls $DOCKER_CTX/Dockerfile-$FRAGMENT* | sort)
    do
        cat $FRAGMENT_FILE >>$DOCKER_CTX/Dockerfile
        rm $FRAGMENT_FILE
    done
done

tree $DOCKER_CTX

DOCKER_IMAGE=$BOARD_ID
sh -c "docker buildx build --progress=plain --load $DOCKER_BUILD_ARGS $DOCKER_CTX -t $DOCKER_IMAGE"
echo "Published as $DOCKER_IMAGE"

