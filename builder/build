#!/bin/bash
set -e

DOCKER_IMAGE=$1
shift
LAYERS="base $@"

if [ -z "$DOCKER_IMAGE" -o -z "$LAYERS" ]
then
    echo "Use: build <docker_image_name> <layers>..."
fi

echo "Building installer image $DOCKER_IMAGE on layers [$LAYERS]"

declare -A LABELS
declare -A ARGS

addVar() {
    KEY=$1
    VALUE=$2
    echo "$KEY=\"$VALUE\""
    eval "$KEY=\"$VALUE\""

    ARGS[$KEY]=$VALUE

    LABEL=$(echo "BUILD_$KEY" | sed "s/.*/\L&/;s/\_/./g")
    LABELS[$LABEL]=$VALUE    

    echo "$KEY=\"$VALUE\"" >>$DOCKER_CTX/root/etc/build
}

applyLayer() {

    local LAYER_NAME=$1
    local LAYER_DIR

    if [[ $LAYER_NAME =~ ^[./] ]]
    then
        LAYER_DIR=$LAYER_NAME
        LAYER_NAME=$(basename $LAYER_NAME)
    else
        LAYER_DIR=$(dirname $0)/layers/$LAYER_NAME
    fi 

    if [ -f $DOCKER_CTX/applied-layers/$LAYER_NAME ]
    then
        return
    fi    

    if [ ! -d $LAYER_DIR ]
    then
        echo "Layer directory $LAYER_DIR does not exist"
        exit 1
    fi

    if [ -f $LAYER_DIR/layer-deps ]
    then
        for LAYER_DEP in $(cat $LAYER_DIR/layer-deps)
        do
            applyLayer $LAYER_DEP
        done
    fi

    echo "Applying layer $LAYER_NAME from $LAYER_DIR"

    cp -r $LAYER_DIR/. $DOCKER_CTX
    mkdir -p $DOCKER_CTX/applied-layers
    echo $LAYER_DIR >$DOCKER_CTX/applied-layers/$LAYER_NAME

    for APPEND in $(find $DOCKER_CTX -type f -regex '.*\.append$')
    do
        TARGET=$(echo $APPEND | sed 's/\.append$//')
        cat $APPEND >>$TARGET
        rm $APPEND
    done
}

DOCKER_CTX=/tmp/build-ctx
rm -rf $DOCKER_CTX
mkdir -p $DOCKER_CTX/root/etc

for LAYER in $LAYERS
do
    applyLayer $LAYER
done

rm -f $DOCKER_CTX/layer-deps

addVar BOARD_ID $DOCKER_IMAGE
for FILE in $DOCKER_CTX/_*
do    
    KEY=$(echo $(basename $FILE) | sed s/^.//)
    VALUE=$(cat $DOCKER_CTX/_$KEY)
    addVar "$KEY" "$VALUE"
    rm $FILE
done

for FRAGMENT in cc boot kernel root installer
do
        cat >>$DOCKER_CTX/~Dockerfile <<EOF

##############################################
# $FRAGMENT
##############################################

EOF

    for FRAGMENT_FILE in $(ls $DOCKER_CTX/Dockerfile-$FRAGMENT* | sort)
    do
        cat $FRAGMENT_FILE >>$DOCKER_CTX/~Dockerfile
        rm $FRAGMENT_FILE
    done
done

for LABEL in ${!LABELS[@]}
do
    echo "LABEL $LABEL='${LABELS[$LABEL]}'" >>$DOCKER_CTX/~Dockerfile
done

for ARG in ${!ARGS[@]}
do
    ARG_SED="${ARG_SED}s/\\\${$ARG}/$(echo ${ARGS[$ARG]} | sed 's/\//\\\//g')/g;"
done

echo $ARG_SED

cat $DOCKER_CTX/~Dockerfile | sed "$ARG_SED" >$DOCKER_CTX/Dockerfile
rm $DOCKER_CTX/~Dockerfile

tree $DOCKER_CTX

sh -c "docker buildx build $DOCKER_BUILD_ARGS --progress=plain --push $DOCKER_CTX -t $DOCKER_IMAGE"
echo "Published as $DOCKER_IMAGE"


